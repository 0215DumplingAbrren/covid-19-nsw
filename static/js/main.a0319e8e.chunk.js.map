{"version":3,"sources":["data.js","components/chart/index.jsx","components/summary/index.jsx","components/table/index.jsx","App.js","serviceWorker.js","index.js"],"names":["nswData","summaryData","chartData","todayData","map","date","today","Date","totalData","total","deathData","death","Chart","option","data","legend","show","tooltip","xAxis","type","yAxis","series","name","Summary","updated","totalConfirmed","remain","recovered","wip","excluded","totalTested","className","Grid","columns","Column","Statistic","color","label","value","Table","unstackable","compact","Body","Row","Cell","Footer","HeaderCell","DetailTable","url","frameborder","onmousewheel","width","height","App","Divider","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0319e8e.chunk.js","sourcesContent":["// date, new today, total confirmed, total death\nexport const nswData = [\n  // ['January 24, 2020', 0, 0, 0],\n  // ['January 25, 2020', 3, 3, 0],\n  // ['January 27, 2020', 1, 4, 0],\n  ['March 1, 2020', 2, 6, 0],\n  ['March 2, 2020', 3, 9, 0],\n  ['March 3, 2020', 6, 15, 0],\n  ['March 4, 2020', 7, 22, 1],\n  ['March 5, 2020', 8, 25, 0],\n  ['March 6, 2020', 3, 28, 0],\n  ['March 7, 2020', 8, 36, 0],\n  ['March 8, 2020', 4, 40, 1]\n];\n\nexport const summaryData = {\n  updated: '10pm 8 March, 2020',\n  totalConfirmed: 40,\n  remain: 34,\n  today: 4,\n  death: 2,\n  recovered: 4,\n  wip: 576,\n  excluded: 7361,\n  totalTested: 8008\n};\n","import React from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport { nswData } from '../../data';\n\nconst chartData = {\n  todayData: nswData.map(([date, today]) => [new Date(date), today]),\n  totalData: nswData.map(([date, _today, total]) => [new Date(date), total]),\n  deathData: nswData.map(([date, _today, _total, death]) => [\n    new Date(date),\n    death\n  ])\n};\n\nconst getOptions = data => {\n  return {\n    legend: {\n      show: true\n    },\n    tooltip: {\n      show: true\n    },\n    xAxis: {\n      type: 'time'\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'total confirmed cases',\n        data: data.totalData\n      },\n      { type: 'bar', name: 'new cases on the day', data: data.todayData },\n      { type: 'bar', name: 'new death cases', data: data.deathData }\n    ]\n  };\n};\n\nexport const Chart = () => <ReactEcharts option={getOptions(chartData)} />;\n","import React from 'react';\nimport { Grid, Statistic, Table } from 'semantic-ui-react';\nimport { summaryData } from '../../data.js';\nimport './index.scss';\n\nexport const Summary = () => {\n  const {\n    updated,\n    totalConfirmed,\n    remain,\n    recovered,\n    death,\n    wip,\n    excluded,\n    totalTested\n  } = summaryData;\n  return (\n    <div className='summary'>\n      <h2 className='ui small header'>Summary data(updated {updated}):</h2>\n      <Grid columns={4}>\n        <Grid.Column>\n          <Statistic color='blue' label='Remain' value={remain} />\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic label='Total' value={totalConfirmed} />\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic color='grey' label='Death' value={death} />\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic color='green' label='Recover' value={recovered} />\n        </Grid.Column>\n      </Grid>\n      <Table unstackable compact>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>Cases under investigation</Table.Cell>\n            <Table.Cell>{wip}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Cases tested and excluded</Table.Cell>\n            <Table.Cell>{excluded}</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n        <Table.Footer>\n          <Table.Row>\n            <Table.HeaderCell>Total tested</Table.HeaderCell>\n            <Table.HeaderCell>{totalTested}</Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    </div>\n  );\n};\n","import React from 'react';\nimport Iframe from 'react-iframe';\n\nexport const DetailTable = () => (\n  <>\n    <h2 className='ui small header'>\n      Confirmed cases details(best view on desktop):\n    </h2>\n    <Iframe\n      className='airtable-embed'\n      url='https://airtable.com/embed/shr289gFl44ZlCYnC?backgroundColor=teal'\n      frameborder='0'\n      onmousewheel=''\n      width='100%'\n      height='500'\n    />\n  </>\n);\n","import React from 'react';\nimport { Summary, Chart, DetailTable } from './components';\nimport { Divider } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className='ui container'>\n      <header>\n        <h1 className='ui header'>CoVid-19 Updates - NSW</h1>\n      </header>\n      <Summary />\n      <Divider />\n      <Chart />\n      <Divider />\n      <DetailTable />\n\n      <footer>\n        <p>\n          <small>\n            Made by <a href='http://wileam.com/'>Joanna Wu</a>, data source:{' '}\n            <a href='https://www.health.nsw.gov.au/Infectious/diseases/Pages/coronavirus.aspx'>\n              NSW Health\n            </a>\n          </small>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}