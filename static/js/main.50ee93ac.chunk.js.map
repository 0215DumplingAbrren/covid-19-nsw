{"version":3,"sources":["components/chart/StatisticsChart.jsx","data.js","dateTime.js","components/chart/DailyConfirmedChart.jsx","components/chart/index.jsx","components/summary/index.jsx","components/table/index.jsx","components/footer/AuthorModal.jsx","components/footer/ContributeModal.jsx","components/footer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["dailyData","stastics","today","length","totalConfirmed","death","map","data","reduce","a","b","summaryData","updated","remain","recovered","wip","excluded","totalTested","dailyChartData","todayData","date","Date","totalData","total","deathData","getOptions","legend","show","tooltip","xAxis","type","yAxis","series","name","DailyConfirmedChart","option","i","push","stasticsData","StatisticsChart","SHOW_STATISTICS","localStorage","getItem","Chart","className","Grid","columns","stackable","Column","Summary","Statistic","color","label","value","Table","unstackable","compact","Body","Row","Cell","Footer","HeaderCell","DetailTable","url","frameborder","onmousewheel","width","height","AuthorModal","Modal","trigger","href","onClick","e","preventDefault","Header","Content","Description","List","bulleted","Item","ContributeModal","App","Divider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOASA,I,iFCNaA,EAAY,CAIvB,CAAC,gBAAiB,EAAG,EAAG,GACxB,CAAC,gBAAiB,EAAG,EAAG,GACxB,CAAC,gBAAiB,EAAG,GAAI,GACzB,CAAC,gBAAiB,EAAG,GAAI,GACzB,CAAC,gBAAiB,EAAG,GAAI,GACzB,CAAC,gBAAiB,EAAG,GAAI,GACzB,CAAC,gBAAiB,EAAG,GAAI,GACzB,CAAC,gBAAiB,EAAG,GAAI,GACzB,CAAC,gBAAiB,EAAG,GAAI,GACzB,CAAC,iBAAkB,EAAG,GAAI,IAIfC,EAAW,CACtB,CAAC,yBAA0B,GAAI,IAAK,KAAM,MAC1C,CAAC,yBAA0B,GAAI,IAAK,KAAM,MAC1C,CAAC,yBAA0B,GAAI,IAAK,KAAM,MAC1C,CAAC,yBAA0B,GAAI,IAAK,KAAM,MAC1C,CAAC,yBAA0B,GAAI,IAAK,KAAM,MAC1C,CAAC,0BAA2B,GAAI,IAAK,KAAM,OAIvCC,EAAQF,EAAUA,EAAUG,OAAS,GAAG,GACxCC,EAAiBJ,EAAUA,EAAUG,OAAS,GAAG,GACjDE,EAAQL,EAAUM,KAAI,SAAAC,GAAI,OAAIA,EAAK,MAAIC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,K,cAErBT,EAASA,EAASE,OAAS,G,GAO3DQ,G,UAAc,CACzBC,QC1CwB,0BD2CxBR,iBACAS,OALaT,EAAiBC,EAFd,EAQhBH,QACAG,QACAS,UAVgB,EAWhBC,I,KACAC,S,KACAC,Y,OE9CIC,EAAiB,CACrBC,UAAWnB,EAAUM,KAAI,mCAAEc,EAAF,KAAQlB,EAAR,WAAmB,CAAC,IAAImB,KAAKD,GAAOlB,MAC7DoB,UAAWtB,EAAUM,KAAI,mCAAEc,EAAF,KAAgBG,GAAhB,iBAA2B,CAAC,IAAIF,KAAKD,GAAOG,MACrEC,UAAWxB,EAAUM,KAAI,mCAAEc,EAAF,KAAwBf,GAAxB,sBAAmC,CAC1D,IAAIgB,KAAKD,GACTf,OAIEoB,EAAa,SAAAlB,GACjB,MAAO,CACLmB,OAAQ,CACNC,MAAM,GAERC,QAAS,CACPD,MAAM,GAERE,MAAO,CACLC,KAAM,QAERC,MAAO,CACLD,KAAM,SAERE,OAAQ,CACN,CACEF,KAAM,OACNG,KAAM,wBACN1B,KAAMA,EAAKe,WAEb,CAAEQ,KAAM,MAAOG,KAAM,uBAAwB1B,KAAMA,EAAKY,WACxD,CAAEW,KAAM,MAAOG,KAAM,kBAAmB1B,KAAMA,EAAKiB,cAK5CU,EAAsB,kBACjC,oCACE,kBAAC,IAAD,CAAcC,OAAQV,EAAWP,OHrCjCd,EAAiB,GACnBW,EAAM,GACNC,EAAW,GACXC,EAAc,GAEPmB,EAAI,EAAGA,EAAInC,EAASE,OAAQiC,IAAK,CACxC,IAAM7B,EAAON,EAASmC,GAChBhB,EAAO,IAAIC,KAAKd,EAAK,IAE3BH,EAAeiC,KAAK,CAACjB,EAAMb,EAAK,KAChCQ,EAAIsB,KAAK,CAACjB,EAAMb,EAAK,KACrBS,EAASqB,KAAK,CAACjB,EAAMb,EAAK,KAC1BU,EAAYoB,KAAK,CAACjB,EAAMb,EAAK,KAG/B,IAAM+B,EAAe,CACnBlC,iBACAW,MACAC,WACAC,eAGIQ,EAAa,SAAAlB,GACjB,MAAO,CACLmB,OAAQ,CACNC,MAAM,GAERC,QAAS,CACPD,MAAM,GAERE,MAAO,CACLC,KAAM,QAERC,MAAO,CACLD,KAAM,SAERE,OAAQ,CACN,CACEF,KAAM,OACNG,KAAM,kBACN1B,KAAMA,EAAKH,gBAEb,CAAE0B,KAAM,OAAQG,KAAM,sBAAuB1B,KAAMA,EAAKQ,KACxD,CAAEe,KAAM,OAAQG,KAAM,sBAAuB1B,KAAMA,EAAKS,UACxD,CAAEc,KAAM,OAAQG,KAAM,eAAgB1B,KAAMA,EAAKU,gBAK1CsB,EAAkB,kBAC7B,oCACE,kBAAC,IAAD,CAAcJ,OAAQV,EAAWa,OIlD/BE,EAAkBC,aAAaC,QAAQ,qBAAsB,EAEtDC,EAAQ,kBACnB,oCACE,wBAAIC,UAAU,mBAAd,aACA,kBAACC,EAAA,EAAD,CAAMC,QAAQ,QAAQC,WAAS,GAC7B,kBAACF,EAAA,EAAKG,OAAN,KACE,kBAAC,EAAD,OAGDR,GACC,kBAACK,EAAA,EAAKG,OAAN,KACE,kBAAC,EAAD,U,kBCZGC,G,OAAU,WAAO,IAE1BrC,EAQED,EARFC,QACAR,EAOEO,EAPFP,eACAS,EAMEF,EANFE,OACAC,EAKEH,EALFG,UACAT,EAIEM,EAJFN,MACAU,EAGEJ,EAHFI,IACAC,EAEEL,EAFFK,SACAC,EACEN,EADFM,YAEF,OACE,yBAAK2B,UAAU,WACb,wBAAIA,UAAU,mBAAd,yBAAuDhC,EAAvD,WACA,kBAACiC,EAAA,EAAD,CAAMC,QAAS,GACb,kBAACD,EAAA,EAAKG,OAAN,KACE,kBAACE,EAAA,EAAD,CAAWC,MAAM,OAAOC,MAAM,SAASC,MAAOxC,KAEhD,kBAACgC,EAAA,EAAKG,OAAN,KACE,kBAACE,EAAA,EAAD,CAAWE,MAAM,QAAQC,MAAOjD,KAElC,kBAACyC,EAAA,EAAKG,OAAN,KACE,kBAACE,EAAA,EAAD,CAAWC,MAAM,OAAOC,MAAM,QAAQC,MAAOhD,KAE/C,kBAACwC,EAAA,EAAKG,OAAN,KACE,kBAACE,EAAA,EAAD,CAAWC,MAAM,QAAQC,MAAM,UAAUC,MAAOvC,MAGpD,kBAACwC,EAAA,EAAD,CAAOC,aAAW,EAACC,SAAO,GACxB,kBAACF,EAAA,EAAMG,KAAP,KACE,kBAACH,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMK,KAAP,kCACA,kBAACL,EAAA,EAAMK,KAAP,KAAa5C,IAEf,kBAACuC,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMK,KAAP,kCACA,kBAACL,EAAA,EAAMK,KAAP,KAAa3C,KAGjB,kBAACsC,EAAA,EAAMM,OAAP,KACE,kBAACN,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMO,WAAP,qBACA,kBAACP,EAAA,EAAMO,WAAP,KAAmB5C,S,SC5ClB6C,EAAc,kBACzB,oCACE,wBAAIlB,UAAU,mBAAd,kDAGA,kBAAC,IAAD,CACEA,UAAU,iBACVmB,IAAI,oEACJC,YAAY,IACZC,aAAa,GACbC,MAAM,OACNC,OAAO,U,2BCXAC,EAAc,kBACzB,kBAACC,EAAA,EAAD,CACEC,QAEE,uBAAGC,KAAK,IAAIC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,mBAA5B,2BAKF,kBAACL,EAAA,EAAMM,OAAP,wBACA,kBAACN,EAAA,EAAMO,QAAP,KACE,kBAACP,EAAA,EAAMQ,YAAP,KACE,kBAACF,EAAA,EAAD,qBACA,kBAACN,EAAA,EAAMQ,YAAP,KACE,kGAGA,iGACsE,IACnE,GACD,uBAAGN,KAAK,4BAAR,gBAHF,gIAQF,kBAACI,EAAA,EAAD,oBACA,kBAACG,EAAA,EAAD,CAAMC,UAAQ,GACZ,kBAACD,EAAA,EAAKE,KAAN,KACE,uBAAGT,KAAK,uBAAR,aADF,sDAIA,kBAACO,EAAA,EAAKE,KAAN,KACE,uBAAGT,KAAK,oBAAR,gBADF,iCAMF,kBAACI,EAAA,EAAD,kBACA,kBAACG,EAAA,EAAD,CAAMC,UAAQ,GACZ,kBAACD,EAAA,EAAKE,KAAN,KACE,uBAAGT,KAAK,8BAAR,YAEF,kBAACO,EAAA,EAAKE,KAAN,KACE,uBAAGT,KAAK,yBAAR,kBC3CCU,EAAkB,kBAC7B,kBAACZ,EAAA,EAAD,CACEC,QAEE,uBAAGC,KAAK,IAAIC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,mBAA5B,gBAKF,kBAACL,EAAA,EAAMM,OAAP,qBACA,kBAACN,EAAA,EAAMO,QAAP,KACE,kBAACP,EAAA,EAAMQ,YAAP,KACE,kGAGA,iGACsE,IACnE,GACD,uBAAGN,KAAK,4BAAR,gBAHF,mICdKX,EAAS,kBACpB,2BACE,0CACU,kBAAC,EAAD,MADV,KAC2B,kBAAC,EAAD,S,uBCmBhBsB,MAnBf,WACE,OACE,yBAAKtC,UAAU,gBACb,gCACE,wBAAIA,UAAU,aAAd,2BAEF,kBAAC,EAAD,MACA,kBAACuC,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAAC,EAAD,MAEA,gCACE,kBAAC,EAAD,SCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50ee93ac.chunk.js","sourcesContent":["import React from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport { stastics } from '../../data';\n\nlet totalConfirmed = [],\n  wip = [],\n  excluded = [],\n  totalTested = [];\n\nfor (let i = 0; i < stastics.length; i++) {\n  const data = stastics[i];\n  const date = new Date(data[0]);\n\n  totalConfirmed.push([date, data[1]]);\n  wip.push([date, data[2]]);\n  excluded.push([date, data[3]]);\n  totalTested.push([date, data[4]]);\n}\n\nconst stasticsData = {\n  totalConfirmed,\n  wip,\n  excluded,\n  totalTested\n};\n\nconst getOptions = data => {\n  return {\n    legend: {\n      show: true\n    },\n    tooltip: {\n      show: true\n    },\n    xAxis: {\n      type: 'time'\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'total confirmed',\n        data: data.totalConfirmed\n      },\n      { type: 'line', name: 'under investigation', data: data.wip },\n      { type: 'line', name: 'tested and excluded', data: data.excluded },\n      { type: 'line', name: 'total tested', data: data.totalTested }\n    ]\n  };\n};\n\nexport const StatisticsChart = () => (\n  <>\n    <ReactEcharts option={getOptions(stasticsData)} />\n  </>\n);\n","import { updateTime } from './dateTime.js';\n\n// date, new today, total confirmed, total death\nexport const dailyData = [\n  // ['January 24, 2020', 0, 0, 0],\n  // ['January 25, 2020', 3, 3, 0],\n  // ['January 27, 2020', 1, 4, 0],\n  ['March 1, 2020', 2, 6, 0],\n  ['March 2, 2020', 3, 9, 0],\n  ['March 3, 2020', 6, 15, 0],\n  ['March 4, 2020', 7, 22, 1],\n  ['March 5, 2020', 8, 25, 0],\n  ['March 6, 2020', 3, 28, 0],\n  ['March 7, 2020', 8, 36, 0],\n  ['March 8, 2020', 4, 40, 1],\n  ['March 9, 2020', 7, 47, 0],\n  ['March 10, 2020', 8, 55, 0]\n];\n\n// date, total confirmed, total wip, total excluded, total tested\nexport const stastics = [\n  ['March 7, 2020 09:00:00', 34, 545, 6217, 6796],\n  ['March 7, 2020 21:00:00', 36, 488, 6690, 7214],\n  ['March 8, 2020 09:00:00', 38, 488, 6690, 7216],\n  ['March 8, 2020 21:00:00', 40, 576, 7361, 7977], // nsw health said total tested is 8008, however that seems a mistake, I updated with the calculation total\n  ['March 9, 2020 16:32:00', 47, 476, 7848, 8371],\n  ['March 10, 2020 09:00:00', 55, 618, 8361, 9034]\n];\n\nconst updated = updateTime;\nconst today = dailyData[dailyData.length - 1][1];\nconst totalConfirmed = dailyData[dailyData.length - 1][2];\nconst death = dailyData.map(data => data[3]).reduce((a, b) => a + b);\n// eslint-disable-next-line\nconst [_1, _2, wip, excluded, totalTested] = stastics[stastics.length - 1];\n\n// Please manually updating the following data:\nconst recovered = 4;\n\nconst remain = totalConfirmed - death - recovered;\n\nexport const summaryData = {\n  updated,\n  totalConfirmed,\n  remain,\n  today,\n  death,\n  recovered,\n  wip,\n  excluded,\n  totalTested\n};\n","export const updateTime = 'March 10, 2020 12:08:03';\n","import React from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport { dailyData } from '../../data';\n\nconst dailyChartData = {\n  todayData: dailyData.map(([date, today]) => [new Date(date), today]),\n  totalData: dailyData.map(([date, _today, total]) => [new Date(date), total]),\n  deathData: dailyData.map(([date, _today, _total, death]) => [\n    new Date(date),\n    death\n  ])\n};\n\nconst getOptions = data => {\n  return {\n    legend: {\n      show: true\n    },\n    tooltip: {\n      show: true\n    },\n    xAxis: {\n      type: 'time'\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [\n      {\n        type: 'line',\n        name: 'total confirmed cases',\n        data: data.totalData\n      },\n      { type: 'bar', name: 'new cases on the day', data: data.todayData },\n      { type: 'bar', name: 'new death cases', data: data.deathData }\n    ]\n  };\n};\n\nexport const DailyConfirmedChart = () => (\n  <>\n    <ReactEcharts option={getOptions(dailyChartData)} />\n  </>\n);\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { DailyConfirmedChart } from './DailyConfirmedChart';\nimport { StatisticsChart } from './StatisticsChart';\n\nconst SHOW_STATISTICS = localStorage.getItem('SHOW_STATISTICS') || false;\n\nexport const Chart = () => (\n  <>\n    <h2 className='ui small header'>Trending:</h2>\n    <Grid columns='equal' stackable>\n      <Grid.Column>\n        <DailyConfirmedChart />\n      </Grid.Column>\n\n      {SHOW_STATISTICS && (\n        <Grid.Column>\n          <StatisticsChart />\n        </Grid.Column>\n      )}\n    </Grid>\n  </>\n);\n","import React from 'react';\nimport { Grid, Statistic, Table } from 'semantic-ui-react';\nimport { summaryData } from '../../data.js';\nimport './index.scss';\n\nexport const Summary = () => {\n  const {\n    updated,\n    totalConfirmed,\n    remain,\n    recovered,\n    death,\n    wip,\n    excluded,\n    totalTested\n  } = summaryData;\n  return (\n    <div className='summary'>\n      <h2 className='ui small header'>Summary data (updated {updated} AEDT):</h2>\n      <Grid columns={4}>\n        <Grid.Column>\n          <Statistic color='blue' label='Remain' value={remain} />\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic label='Total' value={totalConfirmed} />\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic color='grey' label='Death' value={death} />\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic color='green' label='Recover' value={recovered} />\n        </Grid.Column>\n      </Grid>\n      <Table unstackable compact>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>Cases under investigation</Table.Cell>\n            <Table.Cell>{wip}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Cases tested and excluded</Table.Cell>\n            <Table.Cell>{excluded}</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n        <Table.Footer>\n          <Table.Row>\n            <Table.HeaderCell>Total tested</Table.HeaderCell>\n            <Table.HeaderCell>{totalTested}</Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    </div>\n  );\n};\n","import React from 'react';\nimport Iframe from 'react-iframe';\n\nexport const DetailTable = () => (\n  <>\n    <h2 className='ui small header'>\n      Confirmed cases details(best view on desktop):\n    </h2>\n    <Iframe\n      className='airtable-embed'\n      url='https://airtable.com/embed/shr289gFl44ZlCYnC?backgroundColor=teal'\n      frameborder='0'\n      onmousewheel=''\n      width='100%'\n      height='500'\n    />\n  </>\n);\n","import React from 'react';\nimport { Modal, List, Header } from 'semantic-ui-react';\n\nexport const AuthorModal = () => (\n  <Modal\n    trigger={\n      // eslint-disable-next-line\n      <a href='#' onClick={e => e.preventDefault()}>\n        Joanna and her friends\n      </a>\n    }\n  >\n    <Modal.Header>Team and Thanks</Modal.Header>\n    <Modal.Content>\n      <Modal.Description>\n        <Header>Help wanted!</Header>\n        <Modal.Description>\n          <p>\n            Now as there is no api provided, all the data are manually updated.\n          </p>\n          <p>\n            We need more people to keep the data updated!! Please join telegram{' '}\n            {''}\n            <a href='https://t.me/covid_19_au'>@covid_19_au</a> if you wanna\n            help, what we need is simply: when you saw data updated, notify in\n            the group with the source link, thank you!\n          </p>\n        </Modal.Description>\n        <Header>Team member</Header>\n        <List bulleted>\n          <List.Item>\n            <a href='https://wileam.com/'>Joanna Wu</a>: design and develop the\n            website, update the data.\n          </List.Item>\n          <List.Item>\n            <a href='https://ngot.me/'>Henry Zhuang</a>: devops and update the\n            data\n          </List.Item>\n        </List>\n\n        <Header>Thanks to</Header>\n        <List bulleted>\n          <List.Item>\n            <a href='https://www.echartsjs.com/'>echarts</a>\n          </List.Item>\n          <List.Item>\n            <a href='https://airtable.com/'>airtable</a>\n          </List.Item>\n        </List>\n      </Modal.Description>\n    </Modal.Content>\n  </Modal>\n);\n","import React from 'react';\nimport { Modal } from 'semantic-ui-react';\n\nexport const ContributeModal = () => (\n  <Modal\n    trigger={\n      // eslint-disable-next-line\n      <a href='#' onClick={e => e.preventDefault()}>\n        contribute?\n      </a>\n    }\n  >\n    <Modal.Header>Help needed!</Modal.Header>\n    <Modal.Content>\n      <Modal.Description>\n        <p>\n          Now as there is no api provided, all the data are manually updated.\n        </p>\n        <p>\n          We need more people to keep the data updated!! Please join telegram{' '}\n          {''}\n          <a href='https://t.me/covid_19_au'>@covid_19_au</a> if you wanna help,\n          what we need is simply: when you saw data updated, notify in the group\n          with the source link, thank you!\n        </p>\n      </Modal.Description>\n    </Modal.Content>\n  </Modal>\n);\n","import React from 'react';\nimport { AuthorModal } from './AuthorModal';\nimport { ContributeModal } from './ContributeModal';\n\nexport const Footer = () => (\n  <p>\n    <small>\n      Made by <AuthorModal />, <ContributeModal />\n    </small>\n  </p>\n);\n","import React from 'react';\nimport { Summary, Chart, DetailTable, Footer } from './components';\nimport { Divider } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className='ui container'>\n      <header>\n        <h1 className='ui header'>CoVid-19 Updates - NSW</h1>\n      </header>\n      <Summary />\n      <Divider />\n      <Chart />\n      <Divider />\n      <DetailTable />\n\n      <footer>\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}